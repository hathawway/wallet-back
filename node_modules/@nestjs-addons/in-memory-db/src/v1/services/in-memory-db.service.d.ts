import { InMemoryDBV1Config, InMemoryDBV1Entity } from '../interfaces';
import { Observable } from 'rxjs';
export declare class InMemoryDBV1Service<T extends InMemoryDBV1Entity> {
    private readonly config;
    private recordMap;
    constructor(config: InMemoryDBV1Config);
    set records(records: T[]);
    get records(): T[];
    create(record: Partial<T>): T;
    createAsync(record: Partial<T>): Observable<T>;
    createMany(records: Array<Partial<T>>): T[];
    createManyAsync(records: Array<Partial<T>>): Observable<T[]>;
    update(record: T): void;
    updateAsync(record: T): Observable<void>;
    updateMany(records: T[]): void;
    updateManyAsync(records: T[]): Observable<void>;
    delete(id: number): void;
    deleteAsync(id: number): Observable<void>;
    deleteMany(ids: number[]): void;
    deleteManyAsync(ids: number[]): Observable<void>;
    get(id: number): T;
    getAsync(id: number): Observable<T>;
    getMany(ids: number[]): T[];
    getManyAsync(ids: number[]): Observable<T[]>;
    getAll(): T[];
    getAllAsync(): Observable<T[]>;
    query(predicate: (record: T) => boolean): T[];
    queryAsync(predicate: (record: T) => boolean): Observable<T[]>;
    seed(recordFactory: (index: number) => Partial<T>, amount?: number): void;
    private getNextId;
}
