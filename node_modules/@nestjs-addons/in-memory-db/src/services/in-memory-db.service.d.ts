import { InMemoryDBConfig, InMemoryDBEntity } from '../interfaces';
import { Observable } from 'rxjs';
export declare class InMemoryDBService<T extends InMemoryDBEntity> {
    private readonly config;
    private recordMap;
    constructor(config: InMemoryDBConfig);
    set records(records: T[]);
    get records(): T[];
    create(record: Partial<T>, getNextId?: () => string): T;
    createAsync(record: Partial<T>): Observable<T>;
    createMany(records: Array<Partial<T>>, getNextId?: () => string): T[];
    createManyAsync(records: Array<Partial<T>>, getNextId?: () => string): Observable<T[]>;
    update(record: T): void;
    updateAsync(record: T): Observable<void>;
    updateMany(records: T[]): void;
    updateManyAsync(records: T[]): Observable<void>;
    delete(id: string): void;
    deleteAsync(id: string): Observable<void>;
    deleteMany(ids: string[]): void;
    deleteManyAsync(ids: string[]): Observable<void>;
    get(id: string): T;
    getAsync(id: string): Observable<T>;
    getMany(ids: string[]): T[];
    getManyAsync(ids: string[]): Observable<T[]>;
    getAll(): T[];
    getAllAsync(): Observable<T[]>;
    query(predicate: (record: T) => boolean): T[];
    queryAsync(predicate: (record: T) => boolean): Observable<T[]>;
    seed(recordFactory: (index: number) => Partial<T>, amount?: number, getNextId?: () => string): void;
}
