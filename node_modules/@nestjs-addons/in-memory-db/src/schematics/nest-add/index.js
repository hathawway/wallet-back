"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const ts = require("typescript");
const ast_utils_1 = require("../utils/ast-utils");
const change_1 = require("../utils/change");
const module_finder_1 = require("../utils/module.finder");
function getWorkspace(tree) {
    const possibleFiles = ['/nest-cli.json'];
    const path = possibleFiles.filter((configPath) => tree.exists(configPath))[0];
    const configBuffer = tree.read(path);
    if (configBuffer === null) {
        throw new schematics_1.SchematicsException(`Could not find nest-cli.json`);
    }
    const content = configBuffer.toString();
    let workspace;
    try {
        workspace = core_1.parseJson(content, core_1.JsonParseMode.Loose);
    }
    catch (e) {
        throw new schematics_1.SchematicsException(`Could not parse nest-cli.json: ` + e.message);
    }
    return {
        path,
        workspace,
    };
}
function addDeclarationToModule(options) {
    return (tree) => {
        if (options.skipImport !== undefined && options.skipImport) {
            return tree;
        }
        const { workspace } = getWorkspace(tree);
        options.module = new module_finder_1.ModuleFinder(tree).find({
            name: options.module ? options.module : 'app',
            path: ('./' + workspace.sourceRoot),
        });
        if (!tree.exists(options.module)) {
            throw new schematics_1.SchematicsException(`Could not find root module, please use --module flag to specify the root module path.`);
        }
        const content = tree.read(options.module).toString();
        const modulePath = './' + workspace.sourceRoot + '/' + options.module
            ? options.module
            : 'app';
        const source = ts.createSourceFile(modulePath, content, ts.ScriptTarget.Latest, true);
        const importChanges = ast_utils_1.addImportToModule(source, modulePath, 'InMemoryDBModule.forRoot()', '@nestjs-addons/in-memory-db').shift();
        const commonImports = [
            ast_utils_1.insertImport(source, modulePath, 'InMemoryDBModule', '@nestjs-addons/in-memory-db'),
            importChanges,
        ];
        const changes = [...commonImports];
        const recorder = tree.beginUpdate(modulePath);
        for (const change of changes) {
            if (change instanceof change_1.InsertChange) {
                recorder.insertLeft(change.pos, change.toAdd);
            }
        }
        tree.commitUpdate(recorder);
        return tree;
    };
}
function default_1(options) {
    return schematics_1.branchAndMerge(schematics_1.chain([addDeclarationToModule(options)]));
}
exports.default = default_1;
